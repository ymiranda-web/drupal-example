name: deploy-develop
on:
  push:
    branches:
      - 'develop'
    tags:
      - 'v*.*.*'
  pull_request:
    branches:
      - 'main'
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    name: build images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v3
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
            ghcr.io/${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: build and push to docker with ${{ github.repository }}
        uses: docker/build-push-action@v2
        with:
          file: ./.docker/Dockerfile
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64

  deploy-develop:
    name: deploy to develop
    runs-on: ubuntu-latest
    if: startsWith(github.event.ref, 'refs/tags/v')
    permissions:
      contents: read
      packages: read
    steps:
      - uses: actions/checkout@v3
      - name: Set tag env
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
      - name: executing remote ssh commands using password
        uses: appleboy/ssh-action@master
        env:
          USER_MACHINE: ${{ secrets.USERNAME }}
          REGISTRY: ${{ env.REGISTRY }}
          IMAGE_NAME: ${{ env.IMAGE_NAME }}
          IMAGE_TAG: ${{ env.RELEASE_VERSION }}
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.KEY }}
          port: ${{ secrets.PORT }}
          envs: USER_MACHINE,REGISTRY,IMAGE_NAME,IMAGE_TAG
          script: |
            cd /home/$USER_MACHINE/drupal
            docker pull $REGISTRY/$IMAGE_NAME:$IMAGE_TAG
            docker-compose up -d
            docker-compose exec app drush config:import --yes
            docker-compose exec app drush cr
